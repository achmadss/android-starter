name: Setup Template

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project Name'
        required: false
        default: ''
      package_name:
        description: 'Package Name (e.g., com.company.myapp)'
        required: false
        default: ''
      min_sdk:
        description: 'Minimum SDK Version'
        required: false
        default: '26'

jobs:
  setup:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.is_template }}
    steps:
      - uses: actions/checkout@v4

      - name: Debug Repository Info
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Repository name: ${{ github.event.repository.name }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Is template: ${{ github.event.repository.is_template }}"
          echo "Run number: ${{ github.run_number }}"
          echo "Current directory contents:"
          ls -la
          echo "Setup script exists:"
          ls -la setup.sh

      - name: Setup Project
        run: |
          chmod +x setup.sh
          
          # Use repository name as default project name if not provided
          REPO_NAME="${{ github.event.repository.name }}"
          PROJECT_NAME="${{ github.event.inputs.project_name }}"
          PACKAGE_NAME="${{ github.event.inputs.package_name }}"
          MIN_SDK="${{ github.event.inputs.min_sdk }}"
          
          # Use repo name if project name is empty
          if [ -z "$PROJECT_NAME" ]; then
            PROJECT_NAME="$REPO_NAME"
          fi
          
          # Generate package name from repo name if not provided
          if [ -z "$PACKAGE_NAME" ]; then
            OWNER="${{ github.repository_owner }}"
            # Convert to lowercase and replace hyphens/underscores with dots
            CLEAN_OWNER=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]' | tr '-_' '.')
            CLEAN_REPO=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]' | tr '-_' '')
            PACKAGE_NAME="com.${CLEAN_OWNER}.${CLEAN_REPO}"
          fi
          
          echo "=== Setup Configuration ==="
          echo "Project Name: $PROJECT_NAME"
          echo "Package Name: $PACKAGE_NAME"
          echo "Min SDK: $MIN_SDK"
          echo "=========================="
          
          # Show before state
          echo "Before setup - AndroidManifest.xml:"
          cat app/src/main/AndroidManifest.xml || echo "AndroidManifest.xml not found"
          
          # Run setup
          ./setup.sh --name "$PROJECT_NAME" --package "$PACKAGE_NAME" --sdk "$MIN_SDK" --yes
          
          # Show after state
          echo "After setup - AndroidManifest.xml:"
          cat app/src/main/AndroidManifest.xml || echo "AndroidManifest.xml not found"
          
          # Check what files changed
          echo "Git status after setup:"
          git status
          git diff --name-only || echo "No differences found"

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Setup project: ${PROJECT_NAME:-$REPO_NAME}"
            git push
          else
            echo "No changes to commit"
          fi
        env:
          PROJECT_NAME: ${{ github.event.inputs.project_name }}
          REPO_NAME: ${{ github.event.repository.name }}